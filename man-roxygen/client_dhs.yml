dhs_api_request:
  short: >-
    Makes a call to the DHS websites API. You can make requests to any of their
    declared api endpoints (see \code{vignette(rdhs)} for more on these). API
    queries can be filtered by providing query terms, and you can control how
    many search results you want returned. The default paramters will return
    all of the results, and will format it nicely into a data.frame for you.

    N.B. This is easier to now do by using the bespoke functions that are included
    within the package. These take the form dhs_<endpoint>, e.g. \code{\link{dhs_data}}.
    These functions can also take your client as an argument that will cache the
    response for you
  params:
    api_endpoint: >-
      API endpoint. Must be one of the 12 possible endpoints.
    query: >-
      List of query filters. To see possible query filter terms for each endpoint
      then head to the DHS api website.
    api_key: >-
      DHS API key. Default will grab the key provided when the client was created.
    num_results: >-
      The Number of results to return. Default = "ALL" which will loop through all
      the api search results pages for you if there are more results than their API
      will allow you to fetch in one page. If you specify a number this many results
      will be returned (but probably best to just leave default).
    just_results: >-
      Boolean whetehr to return just the results or all the http API
      response. Default = TRUE (probably best again to leave as this.)
  value: >-
      Data.frame with search results if just_results=TRUE, otherwsie a nested
      list with all the API responses for each page required.

available_datasets:
  short: >-
    Searches the DHS website for all the datasets that you can donwload. The results
    of this function are cached in the client. If you have recently reqeusted new datasets
    from the DHS website then you can specify to clear the cache first so that you get the new
    set of datasets avaialble to you.
  params:
    clear_cache_first: >-
      Boolean detailing if you would like to clear the cached available datasets first.
      The default is set to FALSE. This option is available so that you can make sure your
      client fetches any new datasets that you have recently been given access to.
  value: >-
      Data.frame object with 14 variables that detail the surveys you can download,
      their url download links and the country, survey, year etc info for that link.

get_datasets:
  short: >-
    Gets datasets from your cache or dwonlaods from the DHS website. By providing the filenames, as specified in one of the
    returned fields from \code{\link{dhs_datasets}}, the client will log in for you and download all
    the files you hae requested. If any of the requested files are unavailable for your log in, these
    will be flagged up first as a message so you can make a note and request them through the DHS website.
    You also have the option to control whether the downloaded zip file is then extracted and converted
    into a more convenient R \code{data.frame}. This coverted object will then be subsequently saved as
    a ".rds" object within the client root directory datasets folder, which can then be more quickly loaded
    when neaded with \code{readRDS}. You also have the option to reformat the dataset, which will ensure
    that a suitable parser is used to preserve the meta information in your dataset, such as what different
    survey response codes mean.
  params:
    dataset_filenames: >-
      The desired filenames to be downloaded. These can be found as one of the
      returned fields from \code{\link{dhs_datasets}}. Alternatively you can also pass the desired rows from
      \code{\link{dhs_datasets}}.
    download_option: >-
      Character specifying whether the dataset should be just downloaded ("zip"),
      imported and saved as an .rds object ("rds"), or both extract and rds ("both").
      Conveniently you can just specify any letter from these options.
    reformat: >-
      Boolean concerning whether to reformat read in datasets by removing all factors and labels.
      Default = FALSE.
    all_lower: >-
       Logical indicating whether all value labels should be lower case. Default to `TRUE`.
    output_dir_root: >-
      Root directory where the datasets will be stored within. The default will download
      datasets to a subfolder of the client root called "datasets"
    ...: >-
      Any other arguments to be passed to \code{\link{read_dhs_dataset}}
  value: >-
      Depends on the download_option requested, but ultimately it is a file path to where the dataset
      was downloaded to, so that you can interact with it accordingly.

survey_questions:
  short: >-
    Use this function after download_survey to query downloaded surveys for what questions they asked.
    This function will look for the downloaded and imported survey datasets from the cache, and will
    download them if not previously downloaded.
  params:
    dataset_filenames: >-
      The desired filenames to be downloaded. These can be found as one of the
      returned fields from \code{\link{dhs_datasets}}.
    search_terms: >-
      Character vector of search terms. If any of these terms are found within the surveys question
      descriptions, the corresponding code and description will be returned.
    regex: >-
      Regex character pattern for matching. If you want to specify your regex search pattern, then specify
      this argument. N.B. If both search_terms and regex are supplied as arguments then regex will be ignored.
    essential_terms: >-
      Character pattern that has to be in the description of survey questions. I.e. the function will first find
      all survey_questions that contain your search terms (or regex) OR essential_terms. It will then remove any questions
      that did not contain your essential_terms. Default = NULL.
    ...: >-
      Any other arguments to be passed to \code{\link{download_datasets}}
  value: >-
      Data frame of the surveys where matches were found and then all the resultant codes and descriptions.

survey_variables:
  short: >-
    Use this function after download_survey to look up all the surveys that have the provided codes.
  params:
    dataset_filenames: >-
      The desired filenames to be downloaded. These can be found as one of the
      returned fields from \code{\link{dhs_datasets}}.
    variables: >-
      Character vector of survey variables to be looked up
    essential_variables: >-
      Character vector of variables that need to present. If any of the codes are not present in that survey,
      the survey will not be returned by this functon. Default = NULL.
    ...: >-
      Any other arguments to be passed to \code{\link{download_datasets}}
  value: >-
      Data frame of the surveys where matches were found and then all the resultant codes and descriptions.

extract:
  short: >-
    Function to extract datasets using a set of survey questions as taken from the output from \code{survey_questions}
  params:
    questions: >-
      Questions to be queried, in the format from \code{survey_questions}
    add_geo: >-
      Add geograpic information to the extract. Defaut = TRUE

get_var_labels:
  short: >-
      Returns information about a dataset's survey variables and definitions.
  params:
    dataset_filenames: >-
      Vector of dataset filenames to look up
    dataset: >-
      A full read in dataset that has not been reformatted whe declaring \code{client$get_datasets()}
  value: >-
      Data frame of survey variable names and definitions

get_cache_date:
  short: >-
      Returns the private member variable cache-date, which is the date
      the client was last created/valiated against the DHS API.
  value: >-
      POSIXct and POSIXt time

get_root:
  short: >-
      Returns the file path to the client's root directory
  value: >-
      Character string file path

get_downloaded_datasets:
  short: >-
      Returns a named list of all downloaded datasets and their file paths
  value: >-
      List of dataset names and file paths.

set_cache_date:
  short: >-
      Sets the private member variable cache-date, which is the date
      the client was last created/valiated against the DHS API. This should
      never really be needed but is icluded to demonstrate the cache clearing
      properties of the client in the vignette.
  params:
    date: POSIXct and POSIXt time to update cache time to.

save_client:
  short: >-
    Internally save the client object as an .rds file within the root
    directory for the client.

clear_namespace:
  short: >-
    Clear the keys and values associated within a cache context. The dhs client
    caches a number of different tasks, and places these within specific contexts
    using the package \code{storr::storr_rds}.
  params:
    namespace: Character string for the namespace to be cleared.

